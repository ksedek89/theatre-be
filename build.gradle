import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

plugins {
    id 'io.spring.dependency-management' version '1.0.11.RELEASE' apply false
    id 'org.springframework.boot' version '2.6.6' apply false
    id 'io.freefair.lombok' version '6.4.2' apply false
    id 'org.owasp.dependencycheck' version '7.1.0.1'
    id 'ua.eshepelyuk.ManifestClasspath' version '1.0.0'
    id 'com.diffplug.spotless' version '6.4.2'
    id 'groovy'
    id 'java'
    id 'idea'
}

ext {
    gradlePluginDir = "${rootProject.projectDir}/gradle"
}

configure(allprojects) { project ->
    apply plugin: "io.spring.dependency-management"
    apply plugin: "io.freefair.lombok"
    apply plugin: "org.springframework.boot"
    apply plugin: "java"

    dependencyManagement {
        repositories {
            mavenLocal()
            mavenCentral()
            gradlePluginPortal()
            maven {
                url 'https://repo.spring.io/release'
            }
        }

        imports {
            mavenBom "org.spockframework:spock-bom:2.1-groovy-3.0"
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:2021.0.1"
        }

        dependencies {
            dependency "javax.xml.bind:jaxb-api:2.3.1"
            dependency "org.glassfish.jaxb:jaxb-runtime:2.3.1"
            dependency "com.github.ben-manes.caffeine:caffeine:3.0.6"
            dependency "javax.cache:cache-api:1.1.1"
            dependency "net.logstash.logback:logstash-logback-encoder:7.1.1"
            dependency "org.apache.commons:commons-lang3:3.12.0"
            dependency "org.codehaus.groovy:groovy-all:3.0.10"
            dependency "org.slf4j:log4j-over-slf4j:1.7.36"
            dependency "net.bytebuddy:byte-buddy-agent:1.12.9"
            dependency "co.elastic.apm:apm-agent-attach:1.30.1"
            dependency "co.elastic.logging:logback-ecs-encoder:1.3.2"
            dependency "org.springdoc:springdoc-openapi-ui:1.6.7"
            dependency "com.github.jmnarloch:modelmapper-spring-boot-starter:1.1.0"
            dependency "org.modelmapper:modelmapper:3.1.0"
            dependency "org.codehaus.janino:janino:3.1.6"
            dependency 'org.jsoup:jsoup:1.15.1'

            dependencySet(group: 'io.github.openfeign', version: '11.8') {
                entry 'feign-httpclient'
                entry 'feign-okhttp'
            }

            dependencySet(group: 'com.squareup.retrofit2', version: '2.9.0') {
                entry 'converter-jackson'
                entry 'retrofit'
            }

            dependency "com.github.tomakehurst:wiremock-jre8-standalone:2.33.1"
        }

        resolutionStrategy {
            cacheChangingModulesFor 0, "seconds"
        }
    }

    configurations.all {
        resolutionStrategy {
            cacheChangingModulesFor 0, "seconds"
            cacheDynamicVersionsFor 0, "seconds"
        }
    }

    idea {
        module {
            inheritOutputDirs = true
            downloadSources = true
        }
    }

    bootJar {
        enabled = false
    }

    bootRun {
        enabled false
    }
}

configure(subprojects) { project ->
    group = "pl.aswit.theatre"
    version = rootProject.file('version').text.trim()
    sourceCompatibility = JavaVersion.VERSION_17

    apply plugin: 'groovy'
    testClasses.dependsOn compileGroovy

    dependencies {
        implementation "org.slf4j:log4j-over-slf4j"

        testImplementation "org.springframework.boot:spring-boot-starter-test"
        testImplementation "org.codehaus.groovy:groovy-all"
        testImplementation "org.spockframework:spock-core"
        testImplementation "org.spockframework:spock-spring"

        testImplementation "org.junit.jupiter:junit-jupiter-api"
        testImplementation "org.junit.jupiter:junit-jupiter-params"
        testImplementation "org.junit.platform:junit-platform-suite-api"
        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine"
        testRuntimeOnly "org.junit.platform:junit-platform-launcher"
        testRuntimeOnly "org.junit.platform:junit-platform-suite-engine"
    }

    test {
        useJUnitPlatform()
    }

    tasks.withType(Test) {
        testLogging {
            // set options for log level LIFECYCLE
            events TestLogEvent.FAILED,
                    TestLogEvent.PASSED,
                    TestLogEvent.SKIPPED,
                    TestLogEvent.STANDARD_OUT
            exceptionFormat TestExceptionFormat.FULL
            showExceptions true
            showCauses true
            showStackTraces true

            // set options for log level DEBUG and INFO
            debug {
                events TestLogEvent.STARTED,
                        TestLogEvent.FAILED,
                        TestLogEvent.PASSED,
                        TestLogEvent.SKIPPED,
                        TestLogEvent.STANDARD_ERROR,
                        TestLogEvent.STANDARD_OUT
                exceptionFormat TestExceptionFormat.FULL
            }
            info.events = debug.events
            info.exceptionFormat = debug.exceptionFormat

            afterSuite { desc, result ->
                if (!desc.parent) { // will match the outermost suite
                    def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)"
                    def startItem = '|  ', endItem = '  |'
                    def repeatLength = startItem.length() + output.length() + endItem.length()
                    println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
                }
            }
        }
    }

    configurations.all {
        exclude group: "org.slf4j"                , module: "slf4j-log4j12"
        exclude group: "log4j"                    , module: "log4j"
        exclude group: "org.apache.logging.log4j" , module: "log4j-api"
        exclude group: "org.jboss.logmanager"     , module: "jboss-logmanager"
    }
}

spotless {
    format 'misc', {
        // define the files to apply `misc` to
        target '*.gradle', '*.md', '.gitignore'

        // define the steps to apply to those files
        trimTrailingWhitespace()
        indentWithSpaces() // Takes an integer argument if you don't like 4
        endWithNewline()
    }

    java {
        target '**/src/*/java/**/*.java'

        prettier(['prettier': '2.6.2', 'prettier-plugin-java': '1.6.1']).config(['parser': 'java', 'tabWidth': 4, 'printWidth': 160])

        importOrder('java', 'javax', 'org', 'com', 'pl.aswit', '', '\\#pl.aswit', '\\#')
        removeUnusedImports()
    }

    groovyGradle {
        target '**/src/*/groovy/**/*.groovy'
        toggleOffOn()
        importOrder('java', 'javax', 'org', 'com', 'pl.aswit', '', '\\#pl.aswit', '\\#')
        greclipse("4.21.0").configFile "$rootDir/greclipse.properties"
    }
}

task installLocalGitHook(type: Copy) {
    from new File(rootProject.rootDir, 'scripts/pre-commit')
    into { new File(rootProject.rootDir, '.git/hooks')}
    fileMode 0775
}

assemble.dependsOn installLocalGitHook
