import org.apache.tools.ant.filters.ReplaceTokens

ext {
    backendProjectName= 'application'
    jarVersion = project.properties['jarVersion'] ?: project.version
    backendJar = "$backendProjectName-${jarVersion}.jar"
    if (!project.hasProperty('imageTag')) {
        imageTag = version
    }
    dockerImageName = "theatre-be"
}

dependencies {
    implementation project(':theatre-be-main:business-api')
    implementation project(':theatre-be-main:business-impl')
    implementation project(':theatre-be-main:rest-controller')
    implementation project(':theatre-be-main:model')
    implementation project(':theatre-be-main:util')
    implementation project(':theatre-be-main:security')

    implementation "org.springframework.boot:spring-boot-starter-web"
    implementation "org.springframework.boot:spring-boot-starter-cache"
    implementation "com.github.ben-manes.caffeine:caffeine"
    implementation "javax.cache:cache-api"

    implementation "net.logstash.logback:logstash-logback-encoder"
    implementation "org.codehaus.janino:janino"
    implementation "org.springdoc:springdoc-openapi-ui"
    implementation "org.apache.commons:commons-lang3"

    runtimeOnly "org.springframework.boot:spring-boot-devtools"

    implementation "com.github.jmnarloch:modelmapper-spring-boot-starter"
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation "net.bytebuddy:byte-buddy-agent"
    implementation "co.elastic.apm:apm-agent-attach"
    implementation "co.elastic.logging:logback-ecs-encoder"

    implementation "org.springframework.cloud:spring-cloud-starter-openfeign"
    implementation "io.github.openfeign:feign-httpclient"
    implementation "io.github.openfeign:feign-okhttp"

    testImplementation "com.squareup.retrofit2:retrofit"
    testImplementation "com.squareup.retrofit2:converter-jackson"
    testImplementation "com.github.tomakehurst:wiremock-jre8-standalone"
}

apply from: "${gradlePluginDir}/docker.gradle"

apply plugin: 'application'
mainClassName = 'pl.aswit.theatre.Application'

processResources {
    with copySpec {
        from 'src/main/resources'
        include '**/application*.yml'
        include '**/logback-spring.xml'
        duplicatesStrategy DuplicatesStrategy.INCLUDE
        project.properties.findAll {
            it.value != null
        }.each {
            filter(ReplaceTokens, tokens: [(it.key): it.value.toString()])
            filter(ReplaceTokens, tokens: [("project.${it.key}".toString()): it.value.toString()])
        }
    }
}

bootRun {
    enabled true
    if (project.hasProperty('mode')) {
        systemProperty "spring.profiles.active", mode
    }
    jvmArgs = ["-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=8653"]
    def localProps = new Properties()
    file("local.properties").withInputStream { localProps.load(it) }
    systemProperties localProps
}

bootJar {
    enabled = true
}
